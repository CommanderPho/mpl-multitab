# mpl-multitab

> Tabbed figure manager for matplotlib using pyQt

<!-- 
TODO
[![Build Status](https://travis-ci.com/astromancer/mpl-multitab.svg?branch=master)](https://travis-ci.com/astromancer/mpl-multitab)
[![Documentation Status](https://readthedocs.org/projects/mpl-multitab/badge/?version=latest)](https://mpl-multitab.readthedocs.io/en/latest/?badge=latest)
[![PyPI](https://img.shields.io/pypi/v/mpl-multitab.svg)](https://pypi.org/project/mpl-multitab)
[![GitHub](https://img.shields.io/github/license/astromancer/mpl-multitab.svg?color=blue)](https://mpl-multitab.readthedocs.io/en/latest/license.html)
 -->

Ever struggle to navigate between a myriad of open matplotlib figures? I know
your pain...

`mpl-multitab` is a simple application that allows you to embed mutliple figures
in a tabbed figure manager, keeping everything neatly in one place.


# Install
Using pip:
```shell
pip install mpl-multitab
```
Alternatively, clone the repo, then run the [`setup.py`](/setup.py) script
```shell
git clone https://github.com/astromancer/mpl-multitab.git
cd mpl-multitab
python setup.py install
```


# Use

## Interactive use
At the start of your `jupyter notebook`, or `ipython` session, run the line
magic to set the qt backend
```
%matplotlib qt5
```
Then
{EXAMPLES[1d][1d]}

![Demo GIF can be viewed at https://github.com/astromancer/mpl-multitab/blob/main/tests/demo.gif](/tests/demo.gif)


## In a script
{EXAMPLES[1d][scripting]}


## Groups of Figures

You can group multiple related figures together using the `MplMultiTab` class.
This is useful for visualising, for example, multiple datasets each having
multiple observations.

{EXAMPLES[2d][2d]}



![Demo GIF 2 can be viewed at https://github.com/astromancer/mpl-multitab/blob/main/tests/demo2.gif](/tests/demo2.gif)

In this example all the datasets contain the same number of obervations, but
this need not be the case in general.



## Performance considerations: Delayed plotting
Creating all the figures in one go at startup may take unreasonably long if you
have many figures or lots of data. This can be amortised by delaying the
plotting of individual figures until the user switches to that tab. This is 
demonstrated in the following example:

{EXAMPLES[2d][delay_draw]}


## Arbitrary nesting

The `MplMultiTab` class is able to handle nested tabs to any depth. The
following example demonstrates the usage pattern for datasets grouped by 3
different features:

{EXAMPLES[nd][nd]}



![Demo GIF 3 can be viewed at https://github.com/astromancer/mpl-multitab/blob/main/tests/demo3.gif](/tests/demo3.gif)


<!-- For more examples see [Documentation]() -->

<!-- # Documentation -->


# Test

<!-- The [`test suite`](./tests) contains further examples of how
`mpl-multitab` can be used.  Testing is done with `pytest`: -->
Testing is done with [pytest-qt](https://github.com/pytest-dev/pytest-qt/). 
This will run through all examples in the [examples](/examples) module:
```shell
pytest -vs tests/test_multitab.py
```

# Contribute
Contributions are welcome!

1. [Fork it!](https://github.com/astromancer/mpl-multitab/fork)
2. Create your feature branch\
    ``git checkout -b feature/rad``
3. Commit your changes\
    ``git commit -am 'Add some cool feature ðŸ˜Ž'``
4. Push to the branch\
    ``git push origin feature/rad``
5. Create a new Pull Request

# Contact

* e-mail: hannes@saao.ac.za

<!-- ### Third party libraries
 * see [requirements.txt](https://github.com/username/sw-name/blob/master/requirements.txt) files -->

# License

* see [LICENSE](https://github.com/astromancer/mpl-multitab/blob/master/LICENSE)


# Version
This project uses [semantic versioning](https://semver.org/). The latest version
is
* 0.1.0

